/**
 * Executable schema generated by Grats (https://grats.capt.dev)
 * Do not manually edit. Regenerate by running `npx grats`.
 */

import { GraphQLSchema, GraphQLObjectType, GraphQLNonNull, GraphQLList, GraphQLString, GraphQLInt, GraphQLInputObjectType } from "graphql";
import { siteDiaries as querySiteDiariesResolver, siteDiary as querySiteDiaryResolver } from "./query";
import { createSiteDiary as mutationCreateSiteDiaryResolver } from "./mutation";
export function getSchema(): GraphQLSchema {
    const WeatherType: GraphQLObjectType = new GraphQLObjectType({
        name: "Weather",
        fields() {
            return {
                description: {
                    name: "description",
                    type: new GraphQLNonNull(GraphQLString)
                },
                temperature: {
                    name: "temperature",
                    type: new GraphQLNonNull(GraphQLInt)
                }
            };
        }
    });
    const SiteDiaryType: GraphQLObjectType = new GraphQLObjectType({
        name: "SiteDiary",
        fields() {
            return {
                attachments: {
                    name: "attachments",
                    type: new GraphQLList(new GraphQLNonNull(GraphQLString))
                },
                attendees: {
                    name: "attendees",
                    type: new GraphQLList(new GraphQLNonNull(GraphQLString))
                },
                content: {
                    name: "content",
                    type: GraphQLString
                },
                createdBy: {
                    name: "createdBy",
                    type: new GraphQLNonNull(GraphQLString)
                },
                date: {
                    name: "date",
                    type: new GraphQLNonNull(GraphQLString)
                },
                id: {
                    name: "id",
                    type: new GraphQLNonNull(GraphQLString)
                },
                title: {
                    name: "title",
                    type: new GraphQLNonNull(GraphQLString)
                },
                weather: {
                    name: "weather",
                    type: WeatherType
                }
            };
        }
    });
    const QueryType: GraphQLObjectType = new GraphQLObjectType({
        name: "Query",
        fields() {
            return {
                siteDiaries: {
                    name: "siteDiaries",
                    type: new GraphQLNonNull(new GraphQLList(new GraphQLNonNull(SiteDiaryType))),
                    resolve() {
                        return querySiteDiariesResolver();
                    }
                },
                siteDiary: {
                    name: "siteDiary",
                    type: SiteDiaryType,
                    args: {
                        id: {
                            type: new GraphQLNonNull(GraphQLString)
                        }
                    },
                    resolve(_source, args) {
                        return querySiteDiaryResolver(args.id);
                    }
                }
            };
        }
    });
    const SiteDiaryInputType: GraphQLInputObjectType = new GraphQLInputObjectType({
        name: "SiteDiaryInput",
        fields() {
            return {
                createdBy: {
                    name: "createdBy",
                    type: new GraphQLNonNull(GraphQLString)
                },
                date: {
                    name: "date",
                    type: new GraphQLNonNull(GraphQLString)
                },
                id: {
                    name: "id",
                    type: new GraphQLNonNull(GraphQLString)
                },
                title: {
                    name: "title",
                    type: new GraphQLNonNull(GraphQLString)
                }
            };
        }
    });
    const MutationType: GraphQLObjectType = new GraphQLObjectType({
        name: "Mutation",
        fields() {
            return {
                createSiteDiary: {
                    name: "createSiteDiary",
                    type: new GraphQLNonNull(SiteDiaryType),
                    args: {
                        input: {
                            type: new GraphQLNonNull(SiteDiaryInputType)
                        }
                    },
                    resolve(_source, args) {
                        return mutationCreateSiteDiaryResolver(args.input);
                    }
                }
            };
        }
    });
    return new GraphQLSchema({
        query: QueryType,
        mutation: MutationType,
        types: [SiteDiaryInputType, MutationType, QueryType, SiteDiaryType, WeatherType]
    });
}
